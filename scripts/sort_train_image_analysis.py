import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt


from sklearn.metrics import accuracy_score, log_loss
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis
from sklearn.preprocessing import LabelEncoder
from sklearn.cross_validation import StratifiedShuffleSplit

# Sort rows of all_image_output.csv (opencv2 set #1 analysis output)
# jsut for quick viewing


train = pd.read_csv('../train.csv')
test = pd.read_csv('../test.csv')
img_data = pd.read_csv('all_image_output_v2.csv', sep='\t', )

def encode(train, test):
	le = LabelEncoder().fit(train.species) #turn species to no
	labels = le.transform(train.species)   # encode species strings
	classes = list(le.classes_)                    # save column names for submission
	test_ids = test.id # sample id and index no
	train_ids=train['id']
	train = train.drop(['species', 'id'], axis=1)
	test = test.drop(['id'], axis=1)	
	return train, labels, test, test_ids, classes, train_ids, le

train, labels, test, test_ids, classes, train_ids, le = encode(train, test)

print(le.__dict__)
print(len(labels)) #990
print(img_data.head())


# Just to sort training data in CSV according to classes 0 to 98 for quick visualiziton
def aggregate_species_info(species_dict):
	df = pd.DataFrame()
	for i in range(99): #create dictionary ('0' to '98') iteratively
		print("***Class: {}*****".format(i))
		#print(species_dict[str(i)])
		for img_id in species_dict[str(i)]: #{'i':[img_id_list]}, img_id is like xx.jpg string
			for j in range(1584):		
				#WARNING: cant use the col name 'id'
				if (img_data['id'].iloc[j][:-4]==str(img_id)): #if row found
					print("founf")
					print(img_id)
					
					row_df_type=img_data.iloc[j].to_frame().T
					print(type(row_df_type))
					print(row_df_type)
					df=df.append(row_df_type)
					print(len(df))
	df.to_csv('reorder_train_img.csv', sep='\t')


# return species dict
def return_image_filenames_per_species_no(train_ids, labels): # sorting training data by species_id (0 to 98)
	species_dict={}
	for species_no in range(99):
		img_ids=[]
		for i in range(labels.shape[0]): #990
			if labels[i]==species_no:
				img_ids.append(train_ids[i])
		species_dict[str(species_no)]=img_ids
	return species_dict

species_dict=return_image_filenames_per_species_no(train_ids, labels)
#print(species_dict)
aggregate_species_info=aggregate_species_info(species_dict)

#species dict return:
#{'0': [201, 227, 498, 569, 610, 990, 1196, 1377, 1525, 1562], 
#'1': [160, 164, 166, 235, 268, 496, 962, 1000, 1019, 1506], 
#'2': [216, 288, 489, 499, 807, 892, 1005, 1342, 1519, 1556], '3': [1, 317, 906, 1002, 1125, 1159, 1270, 1320, 1450, 1504], '4': [27, 118, 203, 324, 960, 1041, 1085, 1088, 1370, 1551], '5': [146, 311, 362, 810, 915, 949, 956, 1417, 1538, 1578], '6': [38, 322, 331, 408, 511, 589, 754, 1011, 1467, 1512], '7': [238, 698, 727, 873, 1117, 1154, 1165, 1216, 1243, 1245], '8': [148, 364, 404, 570, 641, 651, 652, 713, 853, 1520], '9': [78, 167, 253, 365, 506, 763, 864, 1003, 1182, 1184], '10': [186, 198, 505, 629, 647, 839, 1235, 1242, 1435, 1477], '11': [140, 663, 805, 877, 893, 983, 1217, 1232, 1287, 1581], '12': [55, 290, 314, 475, 493, 868, 954, 1021, 1118, 1258], '13': [34, 371, 376, 738, 788, 971, 1004, 1096, 1302, 1396], '14': [334, 357, 374, 394, 646, 717, 1124, 1255, 1550, 1566], '15': [37, 196, 199, 412, 423, 454, 464, 1034, 1039, 1488], '16': [18, 175, 286, 341, 443, 488, 672, 747, 758, 1097], '17': [339, 415, 461, 615, 621, 1013, 1052, 1213, 1393, 1473], '18': [73, 143, 380, 558, 765, 969, 992, 1119, 1179, 1367], '19': [425, 592, 769, 926, 1087, 1153, 1229, 1273, 1296, 1511], '20': [61, 100, 115, 153, 169, 249, 566, 1175, 1277, 1425], '21': [58, 88, 242, 398, 427, 551, 582, 914, 1094, 1471], '22': [42, 450, 513, 662, 737, 745, 800, 1256, 1405, 1461], '23': [71, 273, 614, 757, 881, 932, 1169, 1345, 1398, 1527], '24': [217, 463, 467, 523, 635, 677, 837, 939, 972, 1208], '25': [60, 224, 360, 552, 572, 622, 831, 1112, 1386, 1431], '26': [218, 366, 630, 709, 721, 968, 1017, 1066, 1284, 1372], '27': [49, 419, 553, 571, 792, 1132, 1263, 1355, 1392, 1460], '28': [56, 289, 678, 689, 720, 752, 771, 844, 882, 1239], '29': [173, 302, 588, 606, 760, 797, 996, 1186, 1378, 1452], '30': [265, 310, 393, 660, 772, 904, 1080, 1344, 1373, 1514], '31': [25, 45, 258, 335, 437, 516, 623, 774, 1202, 1289], '32': [116, 178, 413, 462, 532, 645, 806, 1309, 1319, 1536], '33': [155, 248, 600, 910, 963, 1325, 1346, 1349, 1438, 1501], '34': [106, 231, 697, 789, 1056, 1250, 1347, 1360, 1463, 1574], '35': [124, 219, 358, 396, 568, 573, 827, 1197, 1350, 1391], '36': [48, 85, 122, 212, 430, 501, 538, 722, 794, 878], '37': [149, 252, 325, 348, 519, 585, 597, 811, 908, 1131], '38': [233, 241, 410, 428, 616, 619, 1036, 1147, 1394, 1483], '39': [214, 328, 363, 809, 854, 856, 1031, 1206, 1219, 1384], '40': [8, 256, 338, 411, 562, 748, 749, 874, 1049, 1575], '41': [304, 390, 550, 711, 716, 981, 1173, 1228, 1254, 1440], '42': [342, 449, 502, 633, 732, 931, 1032, 1251, 1499, 1505], '43': [26, 269, 520, 609, 673, 886, 952, 1014, 1271, 1330], '44': [30, 294, 367, 455, 559, 656, 740, 933, 970, 994], '45': [237, 388, 440, 530, 561, 694, 1001, 1223, 1521, 1545], '46': [188, 282, 397, 470, 601, 634, 712, 883, 985, 1413], '47': [81, 145, 456, 865, 894, 924, 987, 1286, 1322, 1340], '48': [80, 542, 859, 1172, 1324, 1411, 1414, 1468, 1496, 1547], '49': [2, 431, 762, 937, 966, 1023, 1076, 1328, 1408, 1518], '50': [21, 134, 260, 595, 759, 955, 1134, 1157, 1310, 1584], '51': [142, 204, 206, 243, 340, 387, 392, 478, 517, 1457], '52': [75, 133, 508, 728, 849, 861, 958, 1312, 1374, 1449], '53': [14, 452, 494, 642, 742, 896, 999, 1205, 1424, 1507], '54': [10, 76, 139, 179, 596, 826, 848, 948, 1095, 1358], '55': [228, 492, 766, 815, 825, 863, 1037, 1048, 1051, 1508], '56': [165, 240, 548, 667, 897, 901, 1220, 1283, 1502, 1554], '57': [168, 283, 326, 458, 675, 821, 923, 1061, 1291, 1479], '58': [22, 69, 87, 632, 840, 1027, 1083, 1145, 1257, 1390], '59': [163, 189, 469, 510, 576, 605, 841, 1007, 1530, 1539], '60': [63, 129, 257, 369, 382, 426, 755, 768, 1072, 1142], '61': [270, 309, 330, 581, 684, 706, 816, 1110, 1167, 1275], '62': [101, 215, 315, 898, 899, 920, 1101, 1123, 1236, 1292], '63': [344, 445, 490, 564, 767, 779, 824, 938, 1281, 1419], '64': [82, 654, 682, 785, 871, 1166, 1225, 1327, 1480, 1516], '65': [3, 66, 275, 628, 801, 1081, 1130, 1171, 1366, 1436], '66': [35, 267, 539, 618, 733, 777, 803, 1006, 1294, 1348], '67': [263, 307, 435, 497, 812, 979, 1194, 1282, 1365, 1380], '68': [664, 851, 879, 918, 1100, 1244, 1253, 1329, 1339, 1353], '69': [67, 202, 349, 487, 852, 944, 989, 1168, 1454, 1529], '70': [485, 693, 724, 730, 753, 1180, 1388, 1459, 1559, 1571], '71': [130, 262, 329, 354, 417, 802, 1024, 1093, 1262, 1446], '72': [127, 132, 796, 1098, 1113, 1144, 1268, 1469, 1475, 1572], '73': [40, 43, 543, 545, 875, 911, 975, 1326, 1491, 1494], '74': [20, 247, 433, 451, 657, 726, 860, 862, 1090, 1231], '75': [29, 245, 303, 521, 808, 885, 1276, 1299, 1305, 1563], '76': [72, 194, 298, 333, 460, 912, 916, 1089, 1170, 1523], '77': [375, 481, 876, 1120, 1163, 1323, 1337, 1399, 1403, 1552], '78': [11, 356, 383, 389, 420, 593, 978, 1128, 1432, 1582], '79': [108, 171, 482, 547, 603, 951, 1010, 1222, 1359, 1402], '80': [355, 377, 446, 468, 563, 900, 1379, 1423, 1476, 1531], '81': [83, 92, 246, 321, 813, 822, 1065, 1278, 1549, 1569], '82': [109, 438, 680, 823, 858, 870, 936, 1341, 1500, 1555], '83': [31, 84, 259, 319, 444, 491, 784, 919, 1016, 1156], '84': [6, 32, 64, 120, 190, 278, 327, 692, 866, 961], '85': [323, 695, 776, 850, 995, 1187, 1210, 1441, 1541, 1557], '86': [345, 350, 514, 524, 631, 828, 1375, 1515, 1548, 1568], '87': [225, 280, 306, 379, 917, 934, 1148, 1317, 1356, 1492], '88': [54, 103, 700, 710, 778, 907, 927, 1046, 1352, 1561], '89': [15, 620, 704, 847, 976, 1025, 1073, 1077, 1472, 1543], '90': [522, 669, 681, 1042, 1121, 1201, 1221, 1442, 1509, 1532], '91': [676, 714, 741, 798, 867, 1160, 1176, 1200, 1269, 1395], '92': [107, 386, 409, 418, 685, 959, 1062, 1174, 1482, 1524], '93': [183, 239, 416, 466, 598, 637, 1030, 1040, 1152, 1249], '94': [5, 50, 211, 459, 649, 942, 1059, 1301, 1335, 1544], '95': [436, 636, 756, 793, 855, 1135, 1238, 1308, 1381, 1448], '96': [291, 528, 671, 787, 838, 869, 928, 1211, 1218, 1240], '97': [152, 556, 661, 1226, 1300, 1311, 1420, 1444, 1474, 1570], '98': [17, 336, 535, 718, 993, 1136, 1198, 1265, 1410, 1443]}



